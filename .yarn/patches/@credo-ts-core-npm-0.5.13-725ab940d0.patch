diff --git a/build/agent/Agent.js b/build/agent/Agent.js
index 2db29e12010690b4bf98c96edebee79402e83795..8c5f8f5bdac634cd1f5db4f1dfc90b2e423b04ca 100644
--- a/build/agent/Agent.js
+++ b/build/agent/Agent.js
@@ -104,6 +104,7 @@ class Agent extends BaseAgent_1.BaseAgent {
     }
     async initialize() {
         const stop$ = this.dependencyManager.resolve(constants_1.InjectionSymbols.Stop$);
+        stop$.next(false);
         // Listen for new messages (either from transports or somewhere else in the framework / extensions)
         // We create this before doing any other initialization, so the initialization could already receive messages
         this.messageSubscription = this.eventEmitter
diff --git a/build/modules/credentials/protocol/revocation-notification/services/RevocationNotificationService.js b/build/modules/credentials/protocol/revocation-notification/services/RevocationNotificationService.js
index 4153838fd21decce3b91770c785c9486426e68f6..e0e2a7fff4014b092874afb0f284c51fbbf12475 100644
--- a/build/modules/credentials/protocol/revocation-notification/services/RevocationNotificationService.js
+++ b/build/modules/credentials/protocol/revocation-notification/services/RevocationNotificationService.js
@@ -18,6 +18,7 @@ const MessageHandlerRegistry_1 = require("../../../../../agent/MessageHandlerReg
 const constants_1 = require("../../../../../constants");
 const CredoError_1 = require("../../../../../error/CredoError");
 const plugins_1 = require("../../../../../plugins");
+const vc_1 = require("../../../../vc");
 const CredentialEvents_1 = require("../../../CredentialEvents");
 const RevocationNotification_1 = require("../../../models/RevocationNotification");
 const repository_1 = require("../../../repository");
@@ -48,22 +49,57 @@ let RevocationNotificationService = class RevocationNotificationService {
                 },
             ],
         };
-        this.logger.trace(`Getting record by query for revocation notification:`, query);
-        const credentialRecord = await this.credentialRepository.getSingleByQuery(agentContext, query);
-        credentialRecord.revocationNotification = new RevocationNotification_1.RevocationNotification(comment);
-        await this.credentialRepository.update(agentContext, credentialRecord);
+        this.logger.trace(`Getting Credential Exchange record by query for revocation notification:`, query)
+        let credentialExchangeRecord = await this.credentialRepository.findSingleByQuery(agentContext, query)
+    
+        if (!credentialExchangeRecord) {
+          const w3cCredentialQuery = {
+            $or: [
+              {
+                anonCredsRevocationRegistryId,
+                anonCredsCredentialRevocationId,
+              },
+              {
+                anonCredsUnqualifiedRevocationRegistryId: anonCredsRevocationRegistryId,
+                anonCredsCredentialRevocationId,
+              },
+            ],
+          }
+          this.logger.trace(
+            `Credential Exchange Record not found. Getting W3C credential record by query for revocation notification:`,
+            w3cCredentialQuery
+          )
+    
+          const w3cCredentialRepository = agentContext.dependencyManager.resolve(vc_1.W3cCredentialRepository)
+          const w3cCredentialRecord = await w3cCredentialRepository.getSingleByQuery(agentContext, w3cCredentialQuery)
+    
+          // Find credential exchange record associated with this credential
+          credentialExchangeRecord =
+            (await this.credentialRepository.getAll(agentContext)).find((record) =>
+              record.credentials.find((item) => item.credentialRecordId === w3cCredentialRecord.id)
+            ) ?? null
+        }
+    
+        if (!credentialExchangeRecord) {
+          throw new CredoError_1.CredoError(
+            `No associated Credential Exchange record found for revocation id ${anonCredsCredentialRevocationId}`
+          )
+        }
+
+        credentialExchangeRecord.revocationNotification = new RevocationNotification_1.RevocationNotification(comment);
+        await this.credentialRepository.update(agentContext, credentialExchangeRecord);
         this.logger.trace('Emitting RevocationNotificationReceivedEvent');
         this.eventEmitter.emit(agentContext, {
             type: CredentialEvents_1.CredentialEventTypes.RevocationNotificationReceived,
             payload: {
                 // Clone record to prevent mutations after emitting event.
-                credentialRecord: credentialRecord.clone(),
+                credentialRecord: credentialExchangeRecord.clone(),
             },
         });
     }
     /**
      * Process a received {@link V1RevocationNotificationMessage}. This will create a
-     * {@link RevocationNotification} and store it in the corresponding {@link CredentialRecord}
+     * {@link RevocationNotification} and store it in the corresponding {@link CredentialExchangeRecord}
      *
      * @param messageContext message context of RevocationNotificationMessageV1
      */
@@ -102,7 +138,7 @@ let RevocationNotificationService = class RevocationNotificationService {
     }
     /**
      * Process a received {@link V2RevocationNotificationMessage}. This will create a
-     * {@link RevocationNotification} and store it in the corresponding {@link CredentialRecord}
+     * {@link RevocationNotification} and store it in the corresponding {@link CredentialExchangeRecord}
      *
      * @param messageContext message context of RevocationNotificationMessageV2
      */
diff --git a/build/modules/dif-presentation-exchange/DifPresentationExchangeService.js b/build/modules/dif-presentation-exchange/DifPresentationExchangeService.js
index 96360da2b3a1128dce53763b4932dbbd82ff3628..ce06aa1bd97b2a0b5d52bfbaf843a9f5a1ea93e7 100644
--- a/build/modules/dif-presentation-exchange/DifPresentationExchangeService.js
+++ b/build/modules/dif-presentation-exchange/DifPresentationExchangeService.js
@@ -171,7 +171,18 @@ let DifPresentationExchangeService = class DifPresentationExchangeService {
             presentationSubmission.descriptor_map.push(...descriptorMap);
         });
         return {
-            verifiablePresentations: verifiablePresentationResultsWithFormat.flatMap((resultWithFormat) => resultWithFormat.verifiablePresentationResult.verifiablePresentations.map((vp) => (0, utils_2.getVerifiablePresentationFromEncoded)(agentContext, vp))),
+            verifiablePresentations: verifiablePresentationResultsWithFormat.flatMap((resultWithFormat) => {
+                if (resultWithFormat.verifiablePresentationResult.verifiablePresentations) {
+                return resultWithFormat.verifiablePresentationResult.verifiablePresentations.map((vp) =>
+                    (0, utils_2.getVerifiablePresentationFromEncoded)(agentContext, vp)
+                )
+                } else {
+                return (0, utils_2.getVerifiablePresentationFromEncoded)(
+                    agentContext,
+                    resultWithFormat.verifiablePresentationResult.verifiablePresentation
+                )
+                }
+            }),
             presentationSubmission,
             presentationSubmissionLocation: verifiablePresentationResultsWithFormat[0].verifiablePresentationResult.presentationSubmissionLocation,
         };
diff --git a/build/transport/WsOutboundTransport.js b/build/transport/WsOutboundTransport.js
index ab9df20f9fedc4def4f486b9431ac669e899e609..2e9e43a528fab6a01e52d54506891060adb917cc 100644
--- a/build/transport/WsOutboundTransport.js
+++ b/build/transport/WsOutboundTransport.js
@@ -43,7 +43,16 @@ class WsOutboundTransport {
         this.transportTable.forEach((socket) => {
             socket.removeEventListener('message', this.handleMessageEvent);
             if (socket.readyState !== this.WebSocketClass.CLOSED) {
-                stillOpenSocketClosingPromises.push(new Promise((resolve) => socket.once('close', resolve)));
+                stillOpenSocketClosingPromises.push(
+                    new Promise((resolve) => {
+                        const closeHandler = () => {
+                            socket.removeEventListener('close', closeHandler)
+                            resolve()
+                        }
+
+                        socket.addEventListener('close', closeHandler)
+                    })
+                );
                 socket.close();
             }
         });
