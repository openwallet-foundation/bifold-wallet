diff --git a/build/anoncreds-rs/AnonCredsRsHolderService.js b/build/anoncreds-rs/AnonCredsRsHolderService.js
index c1eeeca1c9c254f47880909391b22f66598f42fd..b1e0b7913615b2e0b03b8c206ba1f1f02deb54cf 100644
--- a/build/anoncreds-rs/AnonCredsRsHolderService.js
+++ b/build/anoncreds-rs/AnonCredsRsHolderService.js
@@ -82,7 +82,8 @@ let AnonCredsRsHolderService = class AnonCredsRsHolderService {
                         ].join('\n'));
                     }
                 }
-                const { linkSecretId, revocationRegistryId, credentialRevocationId } = (0, w3cAnonCredsUtils_1.getAnoncredsCredentialInfoFromRecord)(credentialRecord, (0, proofRequest_1.proofRequestUsesUnqualifiedIdentifiers)(proofRequest));
+                const proofUsesUnqualifiedIdentifiers = (0, proofRequest_1.proofRequestUsesUnqualifiedIdentifiers)(proofRequest);
+                const { linkSecretId, schemaId, credentialDefinitionId, revocationRegistryId, credentialRevocationId } = (0, w3cAnonCredsUtils_1.getAnoncredsCredentialInfoFromRecord)(credentialRecord, proofUsesUnqualifiedIdentifiers);
                 // TODO: Check if credential has a revocation registry id (check response from anoncreds-rs API, as it is
                 // sending back a mandatory string in Credential.revocationRegistryId)
                 const timestamp = attribute.timestamp;
@@ -112,6 +113,13 @@ let AnonCredsRsHolderService = class AnonCredsRsHolderService {
                             credential: credentialRecord.credential,
                         })
                         : credentialRecord.credential;
+
+                    if (proofUsesUnqualifiedIdentifiers) {
+                        credential.schema_id = schemaId;
+                        credential.cred_def_id = credentialDefinitionId;
+                        credential.rev_reg_id = revocationRegistryId != null ? revocationRegistryId : undefined;
+                    }
+
                     return {
                         linkSecretId,
                         credentialId: attribute.credentialId,
diff --git a/build/formats/AnonCredsProofFormatService.js b/build/formats/AnonCredsProofFormatService.js
index 4c0f7f413a802e459491161d7a913b26d1b3b8a3..a302fc6aaeaa2e3a743d555decc4b97c9c24e457 100644
--- a/build/formats/AnonCredsProofFormatService.js
+++ b/build/formats/AnonCredsProofFormatService.js
@@ -6,6 +6,7 @@ const AnonCredsProofRequest_1 = require("../models/AnonCredsProofRequest");
 const services_1 = require("../services");
 const utils_1 = require("../utils");
 const credential_1 = require("../utils/credential");
+const proofRequest_1 = require("../utils/proofRequest");
 const getCredentialsForAnonCredsRequest_1 = require("../utils/getCredentialsForAnonCredsRequest");
 const ANONCREDS_PRESENTATION_PROPOSAL = 'anoncreds/proof-request@v1.0';
 const ANONCREDS_PRESENTATION_REQUEST = 'anoncreds/proof-request@v1.0';
@@ -253,7 +254,7 @@ class AnonCredsProofFormatService {
      */
     async createProof(agentContext, proofRequest, selectedCredentials) {
         const holderService = agentContext.dependencyManager.resolve(services_1.AnonCredsHolderServiceSymbol);
-        const credentialObjects = await Promise.all([...Object.values(selectedCredentials.attributes), ...Object.values(selectedCredentials.predicates)].map(async (c) => { var _a; return (_a = c.credentialInfo) !== null && _a !== void 0 ? _a : holderService.getCredential(agentContext, { id: c.credentialId }); }));
+        const credentialObjects = await Promise.all([...Object.values(selectedCredentials.attributes), ...Object.values(selectedCredentials.predicates)].map(async (c) => { return holderService.getCredential(agentContext, { id: c.credentialId, useUnqualifiedIdentifiersIfPresent: (0, proofRequest_1.proofRequestUsesUnqualifiedIdentifiers)(proofRequest) }); }));
         const schemas = await this.getSchemas(agentContext, new Set(credentialObjects.map((c) => c.schemaId)));
         const credentialDefinitions = await this.getCredentialDefinitions(agentContext, new Set(credentialObjects.map((c) => c.credentialDefinitionId)));
         // selectedCredentials are overridden with specified timestamps of the revocation status list that
diff --git a/build/utils/proofRequest.js b/build/utils/proofRequest.js
index 63845bb9f2c3721639b6c4ecd16d186b2e05f0de..550fa2acb0c91a47cf47f743e0780955ccf8f12d 100644
--- a/build/utils/proofRequest.js
+++ b/build/utils/proofRequest.js
@@ -9,13 +9,25 @@ function proofRequestUsesUnqualifiedIdentifiers(proofRequest) {
         ...Object.values(proofRequest.requested_predicates),
     ].some((attribute) => {
         var _a;
-        return (_a = attribute.restrictions) === null || _a === void 0 ? void 0 : _a.some((restriction) => (restriction.cred_def_id && (0, indyIdentifiers_1.isUnqualifiedCredentialDefinitionId)(restriction.cred_def_id)) ||
+        return (_a = attribute.restrictions) === null || _a === void 0 ? void 0 : _a.some((restriction) => (
+            // no qualified identifiers
+            !restriction.cred_def_id &&
+            !restriction.schema_id &&
+            !restriction.issuer_did &&
+            !restriction.issuer_id &&
+            !restriction.schema_issuer_did &&
+            !restriction.schema_issuer_id &&
+            !restriction.rev_reg_id
+        ) ||
+            // any unqualified identifier
+            (restriction.cred_def_id && (0, indyIdentifiers_1.isUnqualifiedCredentialDefinitionId)(restriction.cred_def_id)) ||
             (restriction.schema_id && (0, indyIdentifiers_1.isUnqualifiedSchemaId)(restriction.schema_id)) ||
             (restriction.issuer_did && (0, indyIdentifiers_1.isUnqualifiedIndyDid)(restriction.issuer_did)) ||
             (restriction.issuer_id && (0, indyIdentifiers_1.isUnqualifiedIndyDid)(restriction.issuer_id)) ||
             (restriction.schema_issuer_did && (0, indyIdentifiers_1.isUnqualifiedIndyDid)(restriction.schema_issuer_did)) ||
             (restriction.schema_issuer_id && (0, indyIdentifiers_1.isUnqualifiedIndyDid)(restriction.schema_issuer_id)) ||
-            (restriction.rev_reg_id && (0, indyIdentifiers_1.isUnqualifiedRevocationRegistryId)(restriction.rev_reg_id)));
+            (restriction.rev_reg_id && (0, indyIdentifiers_1.isUnqualifiedRevocationRegistryId)(restriction.rev_reg_id))
+        )
     });
 }
 //# sourceMappingURL=proofRequest.js.map
\ No newline at end of file
